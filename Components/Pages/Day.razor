@page "/"
@rendermode InteractiveServer
@using Microsoft.EntityFrameworkCore

<div>
    <span @onclick="PreviousDay"> &lt; </span>
    @date.ToString("dddd, dd/MM/yyyy")
    <span @onclick="NextDay"> &gt; </span>
</div>

<table class="table">
    <thead>
        <tr>
            <th></th>
            @foreach (var kid in kids)
            {
                <th class="kid-column">@kid.Name</th>
            }
        </tr>
    </thead>

    <tbody>
        @foreach (var rule in rules)
        {
            <tr>
                <th>@rule.Description</th>
                @foreach (var kid in kids)
                {
                    <td>
                        <div class="current-cards">
                        @foreach (var card in GetCards(kid.KidId, rule.RuleId))
                        {
                            <button
                             @onclick="() => RemoveCard(card.CardId)"
                             class="btn btn-@(card.Color == Data.CardColor.Yellow ? "warning" : "danger") btn-sm">
                                X
                            </button>
                        }
                        </div>
                        <div class="kid-column-actions">
                        <button class="btn btn-warning btn-sm"
                            @onclick="() => AddCard(kid.KidId, rule.RuleId, Data.CardColor.Yellow)">+</button>
                        <button class="btn btn-danger btn-sm"
                            @onclick="() => AddCard(kid.KidId, rule.RuleId, Data.CardColor.Red)">+</button>
                            </div>
                    </td>
                }
            </tr>
        }
    </tbody>
</table>

@code {
    private IEnumerable<Data.Kid>? kids;
    private IEnumerable<Data.Rule>? rules;
    private IEnumerable<Data.Card>? cards;

    private DateTime date = DateTime.Now.Date;

    private void NextDay()
    {
        date = date.AddDays(1);
    }

    private void PreviousDay()
    {
        date = date.AddDays(-1);
    }


    protected override async Task OnInitializedAsync()
    {
        using var db = new Data.KidsContext();
        kids = await db.Kids.ToListAsync();
        rules = await db.Rules.ToListAsync();
        cards = await db.Cards.ToListAsync();
    }

    private IEnumerable<Data.Card>? GetCards(int kidId, int ruleId)
    {
        return cards?.Where(c => c.KidId == kidId && c.RuleId == ruleId && c.Date == date);
    }

    private async Task AddCard(int kidId, int ruleId, Data.CardColor color)
    {
        using var db = new Data.KidsContext();
        var card = new Data.Card
            {
                KidId = kidId,
                RuleId = ruleId,
                Date = date,
                Color = color
            };
        db.Cards.Add(card);
        await db.SaveChangesAsync();
        cards = await db.Cards.ToListAsync();
    }

    private async Task RemoveCard(int cardId)
    {
        using var db = new Data.KidsContext();
        var card = db.Cards.Find(cardId);
        if (card != null)
        {
            db.Cards.Remove(card);
            await db.SaveChangesAsync();
        }
        cards = await db.Cards.ToListAsync();
    }
}
