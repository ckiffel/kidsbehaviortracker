@page "/summary"
@using Microsoft.EntityFrameworkCore
@using System.Globalization

<h1>Comportement des enfants (résumé)</h1>
<h2>@currentWeekMonday.ToString("dd/MM/yyyy") - @currentWeekSunday.ToString("dd/MM/yyyy")</h2>

@foreach (var kid in kids)
{
    <h3>@kid.Name</h3>
    <table class="table">
    <tr>
        <th></th>
        @for (var day = currentWeekMonday; day <= currentWeekSunday; day = day.AddDays(1))
            {
                <th>@day.ToString("dddd")</th>
            }
        </tr>

        @foreach (var rule in rules)
        {
            <tr>
                <td>@rule.Description</td>
                @for (var day = currentWeekMonday; day <= currentWeekSunday; day = day.AddDays(1))
                {
                    <td>
                        <div class="current-cards">
                            @foreach (var card in GetCards(kid.KidId, rule.RuleId, day))
                            {
                                <span class="badge bg-@(card.Color == Data.CardColor.Yellow ? "warning" : "danger")">
                                    &nbsp;
                                </span>
                            }
                        </div>
                    </td>
                }
            </tr>
        }

    </table>
}

@code {
    private IEnumerable<Data.Kid>? kids;
    private IEnumerable<Data.Rule>? rules;
    private IEnumerable<Data.Card>? cards;

    private DateTime currentWeekMonday;
    private DateTime currentWeekSunday;

    private DateTime GetCurrentWeekMonday()
    {
        CultureInfo ci = new CultureInfo("fr-FR");
        DayOfWeek firstDay = ci.DateTimeFormat.FirstDayOfWeek;
        DateTime today = DateTime.Today;
        int offset = firstDay - today.DayOfWeek;
        DateTime monday = today.AddDays(offset);

        if (DateTime.Now.DayOfWeek == DayOfWeek.Sunday)
        {
            monday = monday.AddDays(-7);
        }
        return monday;
    }

    protected override async Task OnInitializedAsync()
    {
        currentWeekMonday = GetCurrentWeekMonday();
        currentWeekSunday = GetCurrentWeekMonday().AddDays(6);
        using var db = new Data.KidsContext();
        kids = await db.Kids.ToListAsync();
        rules = await db.Rules.ToListAsync();
        cards = await db.Cards.ToListAsync();
    }

    private IEnumerable<Data.Card>? GetCards(int kidId, int ruleId, DateTime date)
    {
        return cards?.Where(c => c.KidId == kidId && c.RuleId == ruleId && c.Date == date);
    }
}
